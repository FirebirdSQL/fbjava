<?xml version="1.0" encoding="UTF-8"?>
<!-- For standalone validation, uncomment the following DOCTYPE declaration. -->
<!--
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
-->
<article id="fbjava">
  <articleinfo>
    <title>FB/Java External Engine Plugin</title>

    <subtitle>Documentation for FB/Java External Engine Plugin</subtitle>

    <author>
      <firstname>Adriano</firstname>
      <surname>dos Santos Fernandes</surname>
    </author>

    <edition>28 May 2016 â€“ Document version 1.0.1</edition>
  </articleinfo>

  <section id="fbjava-whatisit">
    <title>What is the FB/Java External Engine Plugin?</title>

    <para>FB/Java is an External Engine plugin for Firebird that makes Firebird capable of run
    functions, procedures and triggers made in the Java platform.</para>

    <para>It complements Jaybird making it interface with Firebird engine and handling the
    infrastructure necessary to support user routines. It also has a client utility with functions
    to install and uninstall the plugin in a database and that users may use to deploy and
    undeploy Java classes and resources stored in JAR files to a database.</para>
  </section>

  <section id="fbjava-installation">
    <title>Installing FB/Java in Firebird</title>

    <para>Server installation of FB/Java is a simple task involving two passes. The first necessary
    pass is to extract the zip/tarball package in a place subsequently named here as
    &lt;fbjava-root&gt; (this is the parent directory of the packaged bin and others directories).
    The second pass is to include a line in the end of &lt;firebird-root&gt;/plugins.conf file
    pointing to the plugin:

      <programlisting>include &lt;fbjava-root&gt;/conf/fbjava.conf</programlisting>
    </para>

    <para>FB/Java can also be installed in the client making possible to use fbjava-deployer
    utility remotely. In this case it's just necessary to extract the zip/tarball in some directory
    and optionally add its bin directory to the PATH environment variable.</para>

    <para>To develop Java code the only necessary file in the compiling classpath is
    &lt;fbjava-root&gt;/jar/fbjava-&lt;version&gt;.jar</para>

    <para>For Maven users, there is a provisory repository which more info can be found in
    <ulink url="https://github.com/asfernandes/fbjava-maven">https://github.com/asfernandes/fbjava-maven</ulink>.
    </para>

    <para></para>
  </section>

  <section id="fbjava-features">
    <title>Features</title>

    <para>FB/Java features a number of important things:</para>

    <section id="fbjava-mappings">
      <title>Database and Java routines mappings</title>

      <para>There are basically two ways to map database functions and procedures to Java
      methods. By fixed or generic signatures. Triggers can be mapped only with generic signatures.
      </para>

      <note>
        <para>Generics here does not refer to Java 5 generics in any way.</para>
      </note>

      <itemizedlist spacing="normal">
        <listitem>
          <para>Fixed signatures</para>

          <para>Fixed signatures means that for each database routine parameter there should be a
          Java parameter in the method.</para>
        </listitem>

        <listitem>
          <para>Generic signatures</para>

          <para>Generic signatures doesn't have parameters. The Java code can obtain from the
          call Context all parameters or fields values passed by the database routine.</para>
        </listitem>
      </itemizedlist>

      <warning>
        <para>It's expected that in a subsequent test release fixed signatures accepts an
        optional context parameter and that generic signatures requires a single context
        parameter.</para>
      </warning>
    </section>

    <section id="fbjava-security">
      <title>Security</title>

      <para>One of the more important features of the Java platform is it security system, the so
      called sandbox. FB/Java integrates the J2SE/JAAS security mechanism with Firebird so that
      permissions may be assigned to database users running the Java code.</para>

      <para>Users permissions works at server level. They are stored in the
      &lt;fbjava-root&gt;/conf/java-security.fdb database.

      That database contains the tables PERMISSION_GROUP (with columns ID, NAME), PERMISSION (with
      columns PERMISSION_GROUP, CLASS_NAME, ARG1, ARG2) and PERMISSION_GROUP_GRANT (with colums
      PERMISSION_GROUP, DATABASE_PATTERN, GRANTEE_TYPE, GRANTEE_PATTERN).</para>

      <para>PERMISSION_GROUP names a set of PERMISSION associated by PERMISSION.PERMISSION_GROUP
      column.</para>

      <para>In PERMISSION table, there is CLASS_NAME column which stores the Java permission class
      name and ARG1/ARG2 which stores the arguments passed to the permission class constructor.</para>

      <para>The PERMISSION_GROUP_GRANT table associates PERMISSION_GROUP with Firebird users and
      roles. This association is done by a DATABASE_PATTERN and a GRANTEE_TYPE/GRANTEE_PATTERN.
      Patterns are SIMILAR TO patterns escaped by the '|' symbol. Pay attention when using special
      SIMILAR TO characters like underline, if they refer to actual database, user or role name
      parts, they need to be escaped. GRANTEE_TYPE defines if GRANTEE_PATTERN refers to a ROLE or
      USER.</para>

      <para>The plugin ships with a number of permissions grouped as COMMON and granted to all
      (% pattern) users of all databases. They are:</para>

      <table>
        <title>Default permissions granted</title>

        <tgroup cols="3">
          <colspec colname="colClass" colnum="1" colwidth="2*" />
          <colspec colname="colArg1" colnum="2" colwidth="2*" />
          <colspec colname="colArg2" colnum="3" colwidth="2*" />

          <thead>
            <row>
              <entry align="center">CLASS_NAME</entry>
              <entry align="center">ARG1</entry>
              <entry align="center">ARG2</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>java.util.PropertyPermission</entry>
              <entry>file.separator</entry>
              <entry>read</entry>
            </row>

            <row>
              <entry>java.util.PropertyPermission</entry>
              <entry>java.version</entry>
              <entry>read</entry>
            </row>

            <row>
              <entry>java.util.PropertyPermission</entry>
              <entry>java.vendor</entry>
              <entry>read</entry>
            </row>

            <row>
              <entry>java.util.PropertyPermission</entry>
              <entry>java.vendor.url</entry>
              <entry>read</entry>
            </row>

            <row>
              <entry>java.util.PropertyPermission</entry>
              <entry>line.separator</entry>
              <entry>read</entry>
            </row>

            <row>
              <entry>java.util.PropertyPermission</entry>
              <entry>os.*</entry>
              <entry>read</entry>
            </row>

            <row>
              <entry>java.util.PropertyPermission</entry>
              <entry>path.separator</entry>
              <entry>read</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <warning>
        <para>Permissions configured in java-security.fdb are valid only for classes stored
        inside the database. Classes at file system are granted java.security.AllPermission.</para>

        <para>The java.security.AllPermission is effectively valid in this context if the
        code marks itself as privileged, like with java.security.AccessController.doPrivileged
        method.</para>
      </warning>
    </section>

    <section id="fbjava-classloaders">
      <title>ClassLoaders</title>

      <para>FB/Java looks for classes in two different places: the file system and the current
      database, in this order. It is general recommendation that users store they classes in the
      database.</para>

      <para>Classes in the file system are shared between all databases handled by a Firebird process.
      For example, static variables have per-process values. In an analogy with an application server,
      they are the system classes. The internal classes necessary for FB/Java are in
      &lt;fbjava-root&gt;/jar/*.jar and is not recommended to put more jar files there.</para>

      <para>Classes in the database are isolated per-database (and process) and unloaded when the last
      user disconnects from the database/process. So static variables are shared between attachments
      to the same database, but are reinitialized when a closed database is opened. In an analogy with
      an application server, they are the application classes, although an application server does
      not reload application classes when the application is idle.</para>

      <note>
        <para>Classes does not share static variables when used by different Classic or embedded
        process.</para>
      </note>

      <note>
        <para>Classes are unloaded by closing the database classloader. It is subject to
        garbage collection really unload them.</para>
      </note>

      <para>Classes can be stored in the database by two different methods: the fbjava-deployer
      (.bat in Windows and .sh in Linux) utility or the SQLJ package.</para>
    </section>
  </section>

  <section id="fbjava-deployer">
    <title>The deployer utility</title>

    <para>FB/Java allows execution of Java routines stored in the file system without any
    per-database installation. But to have per-database classes, the plugin need to be installed
    on the database.</para>

    <para>fbjava-deployer is the utility to install and uninstall the plugin in databases and to
    install, remove and replace JAR files in databases. Its command line options are:</para>

    <itemizedlist spacing="normal">
      <listitem>
        <para><userinput>--database &lt;connection string&gt;</userinput></para>

        <para>Jaybird connection string, without jdbc: prefix.</para>
      </listitem>

      <listitem>
        <para><userinput>--user &lt;user name&gt;</userinput></para>

        <para>Database user name.</para>
      </listitem>

      <listitem>
        <para><userinput>--password &lt;password&gt;</userinput></para>

        <para>User password.</para>
      </listitem>

      <listitem>
        <para><userinput>--install-plugin</userinput></para>

        <para>Installs the plugin in the database. The installation process consists of the
        creation of some database objects, prefixed with FB$JAVA$ and the SQLJ package.</para>

        <note>
          <para>Details of the install process can be seen in the install.sql file in the scripts
          directory of the plugin.</para>
        </note>
      </listitem>

      <listitem>
        <para><userinput>--uninstall-plugin</userinput></para>

        <para>Uninstalls the plugin from the database. The uninstall process consists of dropping
        all the objects created by the installation process.</para>

        <note>
          <para>Details of the uninstall process can be seen in the uninstall.sql file in the scripts
          directory of the plugin.</para>
        </note>

        <warning>
          <para>All stored JARs are deleted when the plugin is uninstalled.</para>
        </warning>
      </listitem>

      <listitem>
        <para><userinput>--install-jar &lt;URL or filename&gt; &lt;name&gt;</userinput></para>

        <para>Installs a JAR in the database. <userinput>&lt;name&gt;</userinput> is an unique
        identifier to refer to the JAR in subsequent calls, like <userinput>--replace-jar</userinput>,
        <userinput>--update-jar</userinput> or <userinput>--remove-jar</userinput>.</para>
      </listitem>

      <listitem>
        <para><userinput>--update-jar &lt;URL or filename&gt; &lt;name&gt;</userinput></para>

        <para>Updates an existing JAR in the database. It is an error to try to update a JAR with a
        <userinput>&lt;name&gt;</userinput> that is not installed.</para>
      </listitem>

      <listitem>
        <para><userinput>--replace-jar &lt;URL or filename&gt; &lt;name&gt;</userinput></para>

        <para>Replaces a JAR in the database. The replacement is done deleting the current JAR if it exists
        and installing the new one.</para>
      </listitem>

      <listitem>
        <para><userinput>--remove-jar &lt;name&gt;</userinput></para>

        <para>Removes a JAR from the database.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="fbjava-sqlj">
    <title>SQLJ package</title>

    <para>JAR installation, replacement, updation and remotion can also be done with the help
    of the SQLJ package. The SQLJ package just runs the same class used in fbjava-deployer, but in
    the server, as Java stored procedures. With that package, paths and URLs are server-based. Its
    procedures are:</para>

    <itemizedlist spacing="normal">
      <listitem>
        <para><userinput>SQLJ.INSTALL_JAR(&lt;URL or filename&gt;, &lt;name&gt;)</userinput></para>
      </listitem>

      <listitem>
        <para><userinput>SQLJ.UPDATE_JAR(&lt;URL or filename&gt;, &lt;name&gt;)</userinput></para>
      </listitem>

      <listitem>
        <para><userinput>SQLJ.REPLACE_JAR(&lt;URL or filename&gt;, &lt;name&gt;)</userinput></para>
      </listitem>

      <listitem>
        <para><userinput>SQLJ.REMOVE_JAR(&lt;name&gt;)</userinput></para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="fbjava-mapping">
    <title>Mapping database routines to Java methods</title>

    <para>Database routines are mapped to Java methods by a database declaration with an external call
    specification and usage of ENGINE JAVA clause. The call specification consists of the method
    signature, in this format:</para>

    <programlisting>&lt;call specification&gt; ::=
  &lt;fully qualified class name&gt;.&lt;static method name&gt;(
      [&lt;type&gt; [{, &lt;type&gt;}...]])
      [!&lt;name info&gt;]

&lt;type&gt; ::=
  &lt;primitive type&gt; |
  &lt;fully qualified class name or unqualified class name from java.lang package&gt;</programlisting>

    <note>
      <para>The java.lang package prefix may be avoided in parameters types but not in the class name
	  containing the static method.</para>
    </note>

    <note>
      <para>&lt;name info&gt; prefixed by an exclamation point is an optional info you can pass to
      the Java method that it can obtain with the method getNameInfo from the Context interface.
      </para>
    </note>

    <table>
      <title>Supported Java types</title>

      <tgroup cols="3">
        <colspec colname="java-type" colnum="1" colwidth="1.5*" />
        <colspec colname="fb-type" colnum="2" colwidth="1.5*" />
        <colspec colname="notes" colnum="3" colwidth="0.5*" />

        <thead>
          <row>
            <entry align="center">Java type</entry>
            <entry align="center">Compatible Firebird type</entry>
            <entry align="center">Notes</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>byte[]</entry>
            <entry>BLOB, CHAR, VARCHAR</entry>
            <entry></entry>
          </row>

          <row>
            <entry>boolean</entry>
            <entry>any</entry>
            <entry>[1]</entry>
          </row>

          <row>
            <entry>short</entry>
            <entry>any</entry>
            <entry>[1]</entry>
          </row>

          <row>
            <entry>int</entry>
            <entry>any</entry>
            <entry>[1]</entry>
          </row>

          <row>
            <entry>long</entry>
            <entry>any</entry>
            <entry>[1]</entry>
          </row>

          <row>
            <entry>float</entry>
            <entry>any</entry>
            <entry>[1]</entry>
          </row>

          <row>
            <entry>double</entry>
            <entry>any</entry>
            <entry>[1]</entry>
          </row>

          <row>
            <entry>java.lang.Boolean</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.lang.Short</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.lang.Integer</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.lang.Long</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.lang.Float</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.lang.Double</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.lang.Object</entry>
            <entry>any</entry>
            <entry>
              <para>[2]</para>
            </entry>
          </row>

          <row>
            <entry>java.lang.String</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.math.BigDecimal</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.sql.Blob</entry>
            <entry>BLOB</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.sql.Date</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.sql.Time</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.sql.Timestamp</entry>
            <entry>any</entry>
            <entry></entry>
          </row>

          <row>
            <entry>java.util.Date</entry>
            <entry>any</entry>
            <entry></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <note>
      <para>[1] A database NULL is converted to 0 (zero) when passed to a primitive numeric type.
      and false to boolean.
      </para>
      <para>[2] Parameters and trigger values are converted accordingly to default mapping rules.</para>
    </note>

    <note>
      <para>Any compatible type means the plugin doesn't care about the type, it just tries to get
      the value as a Firebird type compatible with the Java type. Basically, this means that a CAST
      will be done from the Firebird value to the default mapping type of the Java type, or
      vice-versa.</para>
    </note>

    <table>
      <title>Default mappings</title>

      <tgroup cols="2">
        <colspec colname="fb-type" colnum="1" colwidth="2*" />
        <colspec colname="java-type" colnum="2" colwidth="2*" />

        <thead>
          <row>
            <entry align="center">Firebird type</entry>
            <entry align="center">Java type</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>NUMERIC</entry>
            <entry>java.math.BigDecimal</entry>
          </row>

          <row>
            <entry>DECIMAL</entry>
            <entry>java.math.BigDecimal</entry>
          </row>

          <row>
            <entry>SMALLINT</entry>
            <entry>java.math.BigDecimal</entry>
          </row>

          <row>
            <entry>INTEGER</entry>
            <entry>java.math.BigDecimal</entry>
          </row>

          <row>
            <entry>BIGINT</entry>
            <entry>java.math.BigDecimal</entry>
          </row>

          <row>
            <entry>FLOAT</entry>
            <entry>java.lang.Float</entry>
          </row>

          <row>
            <entry>DOUBLE PRECISION</entry>
            <entry>java.lang.Double</entry>
          </row>

          <row>
            <entry>BOOLEAN</entry>
            <entry>java.lang.Boolean</entry>
          </row>

          <row>
            <entry>CHAR</entry>
            <entry>java.lang.String</entry>
          </row>

          <row>
            <entry>VARCHAR</entry>
            <entry>java.lang.String</entry>
          </row>

          <row>
            <entry>BLOB</entry>
            <entry>java.sql.Blob</entry>
          </row>

          <row>
            <entry>DATE</entry>
            <entry>java.sql.Date</entry>
          </row>

          <row>
            <entry>TIME</entry>
            <entry>java.sql.Time</entry>
          </row>

          <row>
            <entry>TIMESTAMP</entry>
            <entry>java.sql.Timestamp</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section id="fbjava-mapping-functions">
      <title>Functions mapping</title>

      <para>Functions are the only routine type that always requires a non-void return type in the
      Java method.</para>
      <para>Examples:</para>

      <programlisting>create or alter function get_system_property (
  name varchar(80)
) returns varchar(80)
  external name 'java.lang.System.getProperty(String)'
  engine java;</programlisting>

      <programlisting>-- A single method being mapped to two different Firebird functions.

create function funcSum2 (n1 integer, n2 integer)
    returns integer
  external name 'org.firebirdsql.fbjava.FuncTest.sum()'
  engine java;

create function funcSum4 (n1 integer, n2 integer, n3 integer, n4 integer)
    returns integer
  external name 'org.firebirdsql.fbjava.FuncTest.sum()'
  engine java;</programlisting>
    </section>

    <section id="fbjava-mapping-procedures">
      <title>Procedures mapping</title>

      <para>Procedures can have a return type (of org.firebirdsql.fbjava.ExternalResultSet type or a
      class implementing that interface) or void, depending of it being a selectable procedure or not.
	  Output parameters should appear on the call specification as arrays. FB/Java pass each output
	  parameter as an array of length 1, and routines can change their [0] element.</para>

      <para>Examples:</para>

      <programlisting>-- Executable procedure.
create procedure procInsert (n integer, s varchar(10))
  external name 'org.firebirdsql.fbjava.ProcTest.insert(int, String)'
  engine java;</programlisting>

      <programlisting>-- Selectable procedure.
create procedure procGenRows (numRows integer) returns (n integer)
  external name 'org.firebirdsql.fbjava.ProcTest.genRows(int, int[])'
  engine java;</programlisting>
    </section>

    <section id="fbjava-mapping-triggers">
      <title>Triggers mapping</title>

      <para>Call specification of triggers has always one zero parameter and the Java method should
	  return void. Details of the call and the OLD and NEW values can be read and write from the
      call context.</para>

      <para>Examples:</para>

      <programlisting>create or alter trigger employee_log_bdiu
    before delete or insert or update on employee
  external name 'org.firebirdsql.example.fbjava.FbLogger.info()'
  engine java;</programlisting>
    </section>
  </section>

  <section id="fbjava-context">
    <title>Context</title>

    <para>Java code can obtain a Context object which has information about the Firebird routine
    that mapped to the Java code as well inspect and manipulate metadata and data about the call.
    The Context interface has the following hierarchy:

      <programlisting>
        CallableRoutineContext extends Context
        FunctionContext extends CallableRoutineContext
        ProcedureContext extends CallableRoutineContext
        TriggerContext extends Context
      </programlisting>
    </para>

    <para>All these interfaces have a static get() method to obtain the object instance.
    More details of what can be done from them can be consulted in the Java Docs present in
    &lt;fbjava-root&gt;/docs/apidocs</para>
  </section>

  <section id="fbjava-known-issues">
    <title>Known issues</title>

    <para>In this test version it's not possible to use Jaybird's non-pure-Java connection string
    protocols like embedded, native and local.</para>
  </section>
</article>
